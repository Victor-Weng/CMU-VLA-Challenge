<launch>

  <!-- Common frame/topic args for easy switching if TF frames differ -->
  <arg name="map_frame" default="map"/>
  <arg name="robot_frame" default="sensor"/>
  <arg name="robot_pose_topic" default="/state_estimation"/>
  <!-- Go-home recovery options -->
  <arg name="go_home_on_long_stagnation" default="true"/>
  <arg name="long_stagnation_sec" default="10.0"/>
  <arg name="home_x" default="0.0"/>
  <arg name="home_y" default="0.0"/>
  <arg name="home_pause_sec" default="1.0"/>
  <arg name="home_reach_thresh" default="0.3"/>
  <arg name="home_push_dist" default="3.0"/>
  <arg name="home_go_timeout_sec" default="20.0"/>
  <arg name="home_push_timeout_sec" default="10.0"/>
  <arg name="image_topic" default="/camera/image"/>
  <arg name="lidar_topic" default="/registered_scan"/>
  <arg name="min_period_sec" default="0.5"/>
  <arg name="min_distance_m" default="0.5"/>
  <!-- Image save and detection from ROS camera topic -->
  <arg name="enable_camera_saver" default="false"/>
  <arg name="detect_interval_sec" default="10.0"/>
  <arg name="detect_model" default="yolov8n.pt"/>
  <arg name="detect_save_path" default=""/>
  <!-- Paired detection + depth fusion config -->
  <arg name="paired_detect_model" default="yolov8n.pt"/>
  <arg name="paired_detect_save_path" default="/home/victor/CMU-VLA-Challenge/ai_module/src/data/image.png"/>
  <arg name="paired_angle_window_deg" default="1.5"/>
  <arg name="paired_tf_time_policy" default="latest"/>
  <arg name="paired_tf_use_latest_fallback" default="true"/>
  <arg name="paired_clear_on_startup" default="true"/>
  <arg name="paired_also_clear_image" default="false"/>

  <node pkg="dummy_vlm" type="dummyVLM" name="dummyVLM" output="screen" required="true">
    <param name="waypoint_file_dir" type="string" value="$(find dummy_vlm)/data/waypoints.ply" />
    <param name="object_list_file_dir" type="string" value="$(find dummy_vlm)/data/object_list.txt" />
    <param name="waypointReachDis" type="double" value="1.0" />
    <param name="map_frame" value="$(arg map_frame)"/>
    <param name="robot_frame" value="$(arg robot_frame)"/>
    <!-- Stagnation detection and recovery tuning -->
    <param name="stagnation_time" value="20.0"/>
    <param name="min_goal_delta" value="0.20"/>
    <param name="min_movement" value="0.20"/>
    <param name="recovery_cooldown" value="10.0"/>
    <param name="turn_radians" value="3.2"/>
    <param name="recovery_hold_sec" value="3.0"/>
    <!-- Recovery sequence tuning: back up then turn -->
    <param name="recovery_backup_dist" value="1"/>
    <param name="recovery_step_wait_sec" value="1.5"/>
    <param name="recovery_turn_wait_sec" value="1.0"/>
    <param name="recovery_reach_thresh" value="0.15"/>
    <!-- New: go-home recovery parameters -->
    <param name="go_home_on_long_stagnation" value="$(arg go_home_on_long_stagnation)"/>
    <param name="long_stagnation_sec" value="$(arg long_stagnation_sec)"/>
    <param name="home_x" value="$(arg home_x)"/>
    <param name="home_y" value="$(arg home_y)"/>
    <param name="home_pause_sec" value="$(arg home_pause_sec)"/>
    <param name="home_reach_thresh" value="$(arg home_reach_thresh)"/>
    <param name="home_push_dist" value="$(arg home_push_dist)"/>
    <param name="home_go_timeout_sec" value="$(arg home_go_timeout_sec)"/>
    <param name="home_push_timeout_sec" value="$(arg home_push_timeout_sec)"/>
  </node>
  <!-- Simple converter: /terrain_map (PointCloud2) -> /map (OccupancyGrid) -->
  <node pkg="dummy_vlm" type="pc_to_grid" name="pc_to_grid" output="screen">
    <param name="input_cloud" value="/terrain_map"/>
    <param name="map_frame" value="$(arg map_frame)"/>
    <param name="resolution" value="0.2"/>
    <param name="size_x" value="80.0"/>
    <param name="size_y" value="80.0"/>
    <param name="z_min" value="-1.0"/>
    <param name="z_max" value="2.0"/>
    <param name="occ_height_threshold" value="0.25"/>
    <param name="free_height_threshold" value="0.15"/>
    <param name="downsample" value="0.1"/>
  </node>
  <node pkg="dummy_vlm" type="frontier_explorer" name="frontier_explorer" output="screen">
    <param name="map_topic" value="/map"/>
    <param name="goal_topic" value="/next_goal"/>
    <param name="map_frame" value="$(arg map_frame)"/>
    <param name="robot_frame" value="$(arg robot_frame)"/>
    <param name="robot_pose_topic" value="$(arg robot_pose_topic)"/>
    <param name="fallback_enabled" value="true"/>
    <param name="fallback_radius_max" value="5.0"/>
    <param name="robot_radius" value="0.35"/>
    <param name="safety_margin" value="0.25"/>
    <!-- Frontier tuning -->
    <param name="min_frontier_cells" value="12"/>
    <param name="free_threshold" value="20"/>
    <param name="occ_threshold" value="65"/>
    <!-- Goal selection & hysteresis -->
    <param name="min_goal_dist" value="1.0"/>
    <param name="min_publish_separation" value="0.6"/>
    <param name="min_publish_period" value="1.5"/>
    <param name="unknown_radius" value="2.0"/>
    <param name="weight_unknown" value="1.0"/>
    <param name="weight_distance" value="0.2"/>
    <!-- Anti-oscillation / commitment tuning -->
    <param name="switch_improvement" value="5.0"/>
    <param name="goal_timeout" value="25.0"/>
    <param name="progress_window" value="6.0"/>
    <param name="min_progress" value="0.30"/>
    <param name="recent_goal_block_s" value="12.0"/>
    <param name="recent_goal_radius_m" value="0.6"/>
  </node>

  <!-- Capture synchronized image+LiDAR pairs with time/distance gating -->
  <node pkg="dummy_vlm" type="image_lidar_capture" name="image_lidar_capture" output="screen">
    <param name="image_topic" value="$(arg image_topic)"/>
    <param name="lidar_topic" value="$(arg lidar_topic)"/>
    <param name="odom_topic" value="$(arg robot_pose_topic)"/>
    <param name="min_period_sec" value="$(arg min_period_sec)"/>
    <param name="min_distance_m" value="$(arg min_distance_m)"/>
  </node>

  <!-- Subscribe to camera topic, save image every N seconds, and run detection script -->
  <node if="$(arg enable_camera_saver)" pkg="dummy_vlm" type="camera_save_and_detect.py" name="camera_save_and_detect" output="screen">
    <param name="image_topic" value="$(arg image_topic)"/>
    <param name="interval_sec" value="$(arg detect_interval_sec)"/>
    <param name="model" value="$(arg detect_model)"/>
    <param name="save_path" value="$(arg detect_save_path)"/>
  </node>

  <!-- Fuse paired image + point cloud: save image, run detection, estimate distance, append to object_list.txt -->
  <node pkg="dummy_vlm" type="paired_detect_and_depth.py" name="paired_detect_and_depth" output="screen">
    <param name="image_topic" value="/paired/image"/>
    <param name="points_topic" value="/paired/points"/>
    <param name="model" value="$(arg paired_detect_model)"/>
    <param name="save_path" value="$(arg paired_detect_save_path)"/>
    <param name="angle_window_deg" value="$(arg paired_angle_window_deg)"/>
    <param name="tf_time_policy" value="$(arg paired_tf_time_policy)"/>
    <param name="tf_use_latest_fallback" value="$(arg paired_tf_use_latest_fallback)"/>
    <param name="clear_on_startup" value="$(arg paired_clear_on_startup)"/>
    <param name="also_clear_image" value="$(arg paired_also_clear_image)"/>
  </node>

</launch>
